/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

// private:

// int height(TreeNode* root){
//     if(root==NULL){
//         return 0;
//     }

//     int left= height(root->left);
//     int right= height(root->right);
//     int ans= max(left,right)+1;

//     return ans;
// }

public:
pair<bool,int> isBalancedFast(TreeNode* root){
    //base case 
    if(root==NULL){
        pair<bool,int> p= make_pair(true,0);
        return p;
    }

    //recursive call for left and right part

    pair<bool,int> left=isBalancedFast(root->left);
    pair<bool,int> right = isBalancedFast(root->right);

    //bool of leftAns and rightAns states if left and right part is balanced or not
    bool leftAns= left.first;
    bool rightAns= right.first;
    bool diff= abs(left.second-right.second)<=1;


    pair<bool,int> ans; //pair declaration to store ans
    ans.second = max(left.second, right.second)+1;

    if(leftAns&&rightAns&&diff){
        ans.first=true;
    }
    else {
        ans.first= false;
    }
return ans;

}
    bool isBalanced(TreeNode* root) {

        return isBalancedFast(root).first;

    }
};
