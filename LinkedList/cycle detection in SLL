#include <functional>
bool detectCycle(Node *head)
{
	//	Write your code here
    //brute force: use hashing 

    unordered_map <Node*,int> mpp;

    Node* temp = head;
    while(temp != NULL){
        if(mpp.find(temp) != mpp.end()) return true;
        mpp[temp] = 1;
        temp = temp->next;
    }

    return false;

    //optimal: slow ans fast pointer will collide at same node definetly
  //TC=0(N) SC:0(1)

    // if(head==NULL||head->next==NULL){
    //     return 0;
    // }
    // Node* slow= head;
    // Node* fast= head;
    // while(fast->next!=NULL&&fast->next->next!=NULL){
    //     slow=slow->next;
    //     fast= fast->next->next;
    //     if(slow==fast){
    //         return 1;
    //     }
    // }
    // return 0;


}
