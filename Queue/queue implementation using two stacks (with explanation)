// #include<stack>

class MyQueue {
private:
        //initialisation of stack
        stack<int> s1;
        stack<int> s2;
public:
    MyQueue() {
        
    }
    
    void push(int x) {
        s1.push(x);
        
    }
    
    int pop() {
        while(!s1.empty()){
            int temp= s1.top();
            s1.pop();
            s2.push(temp);
        }

        int ans = s2.top();
        s2.pop();
        while(!s2.empty()){
            int temp= s2.top();
            s2.pop();
            s1.push(temp);
        }
        return ans;

        
    }
    
    int peek() {
        while(!s1.empty()){
            int temp= s1.top();
            s1.pop();
            s2.push(temp);
        }

        int ans = s2.top();
        // s2.pop();
        while(!s2.empty()){
            int temp= s2.top();
            s2.pop();
            s1.push(temp);
        }
        return ans;
        
    }
    
    bool empty() {
        if(s1.empty()){
            return true;
        }
        return false;
        
    }
};

//we have two stacks s1 and s2 in which whenever we want to push an integer in queue we push in s1 and when we want to pop() or peek() we use other stack s2 because first element of queue is at the bottom of stack s1 and we cant pop or peek it unless its on the top of any stack;;
//got it, got it,  we shift all elements of stack s1 to s2 and thus making elements at the bottom of s1 to the top of s2 and now we can pop() and peek() 

//chipi chipi chapa chapa 

//source:https://youtu.be/mDcP7tLuBhc?si=XMQHVLPqrCYf2HtE


/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
